<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>activiti-app-overlay-docker</artifactId>
	<packaging>jar</packaging>
	<name>APS - SDK Project - Overlay Docker</name>

	<parent>
		<groupId>org.alfresco.activiti</groupId>
		<artifactId>aps-project</artifactId>
		<version>2.6.0</version>
	</parent>

	<properties>
		<!-- Docker Activiti App properties -->
		<docker.aps.activiti-app.volume.internal>/activiti-app-overlay-war/target/activiti-app.war</docker.aps.activiti-app.volume.internal>
		<docker.aps.activiti-app.volume.external>/usr/local/tomcat/webapps/activiti-app.war</docker.aps.activiti-app.volume.external>
		<docker.aps.activiti-app.bind.volume>${project.parent.basedir}${docker.aps.activiti-app.volume.internal}:${docker.aps.activiti-app.volume.external}</docker.aps.activiti-app.bind.volume>

		<docker.aps.database.port.internal>5432</docker.aps.database.port.internal>
		<docker.aps.database.port.external>5432</docker.aps.database.port.external>

		<docker.aps.database.vendor>postgres</docker.aps.database.vendor>
		<docker.aps.database.vendor.version>${postgresql.version}</docker.aps.database.vendor.version>
		<docker.aps.database.image>${docker.aps.database.vendor}:${docker.aps.database.vendor.version}</docker.aps.database.image>
		<docker.aps.database.username>alfresco</docker.aps.database.username>
		<docker.aps.database.password>alfresco</docker.aps.database.password>
		<docker.aps.database.driver>org.postgresql.Driver</docker.aps.database.driver>
		<docker.aps.database.dialect>org.hibernate.dialect.PostgreSQLDialect</docker.aps.database.dialect>
		<docker.aps.database.url>jdbc:postgresql://postgre:5432/activiti?characterEncoding=UTF-8</docker.aps.database.url>
		<docker.aps.database.csrf.disabled>true</docker.aps.database.csrf.disabled>
		<docker.aps.database.cors.enabled>true</docker.aps.database.cors.enabled>

		<docker.aps.database.server.db.name>activiti</docker.aps.database.server.db.name>

		<docker.aps.es.server.type>rest</docker.aps.es.server.type>
		<docker.aps.es.server.address>elasticsearch</docker.aps.es.server.address>
		<docker.aps.es.server.port>9200</docker.aps.es.server.port>
		<docker.aps.es.discovery.host>elasticsearch:9300</docker.aps.es.discovery.host>
		<docker.aps.es.cluster.name>elasticsearch</docker.aps.es.cluster.name>
		<docker.aps.es.discovery.type>single-node</docker.aps.es.discovery.type>
		<docker.aps.es.memory.settings>-Xms512m -Xmx512m</docker.aps.es.memory.settings>

		<!-- Docker APS Extensions JAR properties -->
		<docker.aps.extension-jar.volume.internal>/aps-extensions-jar/target/aps-extensions-${project.version}.jar</docker.aps.extension-jar.volume.internal>
		<docker.aps.extension-jar.volume.external>/usr/local/tomcat/webapps/activiti-app/WEB-INF/lib/aps-extensions-${project.version}.jar</docker.aps.extension-jar.volume.external>
		<docker.aps.extension-jar.bind.volume>${project.parent.basedir}${docker.aps.extension-jar.volume.internal}:${docker.aps.extension-jar.volume.external}</docker.aps.extension-jar.bind.volume>

		<docker.aps.extension-jar.copy>${project.parent.basedir}${docker.aps.extension-jar.volume.internal}
			${docker.aps.extension-jar.volume.external}</docker.aps.extension-jar.copy>

		<docker.aps.activiti-app.copy>${project.parent.basedir}${docker.aps.activiti-app.volume.internal}
			${docker.aps.activiti-app.volume.external}</docker.aps.activiti-app.copy>

		<docker.tomcat.port.external>8080</docker.tomcat.port.external>
		<docker.tomcat.port.internal>8080</docker.tomcat.port.internal>

		<docker.aps-admin.tomcat.port.internal>8081</docker.aps-admin.tomcat.port.internal>
		<docker.aps-admin.tomcat.port.external>8081</docker.aps-admin.tomcat.port.external>

		<docker.es.service.port.internal>9200</docker.es.service.port.internal>
		<docker.es.service.port.external>9200</docker.es.service.port.external>
		<docker.es.discovery.port.internal>9300</docker.es.discovery.port.internal>
		<docker.es.discovery.port.external>9300</docker.es.discovery.port.external>


		<docker.activiti.time.test>400000</docker.activiti.time.test>

		<copy-jdbc-driver-for-admin.phase>package</copy-jdbc-driver-for-admin.phase>
		<build-activiti-admin-arm64.phase>pre-integration-test</build-activiti-admin-arm64.phase>
		
		<aps.debug.port>5005</aps.debug.port>
		<catalina.opts.debug>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:${aps.debug.port}</catalina.opts.debug>
		
		<docker.compose.dockerfile.activiti.app>Dockerfile-${aps.version}</docker.compose.dockerfile.activiti.app>
		<docker.compose.dockerfile.activiti.admin>Dockerfile-admin-${aps.version}</docker.compose.dockerfile.activiti.admin>
		
		<custom2.parent.project.basedir>${project.parent.basedir}</custom2.parent.project.basedir>
		
	</properties>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>					
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${maven-eclipse-lifecycle-mapping.version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[${maven-dependency-plugin.version},)</versionRange>
										<goals>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${maven-antrun-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.gmaven</groupId>
					<artifactId>groovy-maven-plugin</artifactId>
					<version>${gmaven-plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
			  <groupId>org.codehaus.gmaven</groupId>
			  <artifactId>groovy-maven-plugin</artifactId>
			  <executions>
			    <execution>
			      <id>set-project-parent-basedir-for-ant</id>
			      <phase>validate</phase>
			      <goals>
			        <goal>execute</goal>
			      </goals>
			      <configuration>
			        <source>
			          project.properties.setProperty('ant.project.parent.basedir', project.parent.basedir.toString())
			        </source>
			      </configuration>
			    </execution>
			  </executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
	                <execution>
						<id>copy-and-rename-dockerfiles</id>
						<inherited>false</inherited>
	                    <phase>package</phase>
	                    <configuration>
	                        <target>
	                            <copy file="${ant.project.parent.basedir}/target/${docker.compose.dockerfile.activiti.app}" tofile="${ant.project.parent.basedir}/target/Dockerfile" />
	                            <copy file="${ant.project.parent.basedir}/target/admin/${docker.compose.dockerfile.activiti.admin}" tofile="${ant.project.parent.basedir}/target/admin/Dockerfile" />
	                        </target>
	                    </configuration>
	                    <goals>
	                        <goal>run</goal>
	                    </goals>
	                </execution>
            	</executions>
			</plugin>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-jdbc-driver-for-admin</id>
						<phase>${copy-jdbc-driver-for-admin.phase}</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.h2database</groupId>
									<artifactId>h2</artifactId>
									<version>${h2.version}</version>
									<type>jar</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.parent.basedir}/target/admin/jdbc</outputDirectory>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
					<execution>
						<id>copy-jar-extensions</id>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.alfresco.activiti</groupId>
									<artifactId>aps-extensions-jar</artifactId>
									<version>${project.version}</version>
									<type>jar</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.parent.basedir}/target/extensions</outputDirectory>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
					<execution>
						<id>copy-war-extensions</id>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.alfresco.activiti</groupId>
									<artifactId>activiti-app-overlay-war</artifactId>
									<version>${project.version}</version>
									<type>war</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.parent.basedir}/target/extensions</outputDirectory>
									<destFileName>activiti-app.war</destFileName>
								</artifactItem>
								<artifactItem>
									<groupId>com.activiti</groupId>
									<artifactId>activiti-admin</artifactId>
									<version>${aps.version}</version>
									<type>war</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.parent.basedir}/target/admin/extensions</outputDirectory>
									<destFileName>activiti-admin.war</destFileName>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-and-filter-docker-resources</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.parent.basedir}/target</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<filtering>true</filtering>
									<excludes>
										<exclude>**/*.jar</exclude>
										<exclude>**/*.so</exclude>
										<exclude>**/*.gz</exclude>
									</excludes>
									<includes>
										<include>**/Dockerfile-${aps.version}*</include>
										<include>**/Dockerfile-admin-${aps.version}*</include>
										<include>**/docker-compose/*.*</include>
										<include>**/config/*.*</include>
										<include>**/license/*.*</include>
										<include>**/logging/*.*</include>
										<include>**/properties/*.*</include>
										<include>**/admin</include>
									    <include>**/admin/properties/*.*</include>
									    <include>**/admin/tomcat/*.*</include>
									    <include>**/admin/tomcat/conf/*.*</include>
									</includes>
								</resource>
							</resources>
							<nonFilteredFileExtensions>
								<nonFilteredFileExtension>lic</nonFilteredFileExtension>
							</nonFilteredFileExtensions>
						</configuration>
					</execution>
					<execution>
						<id>copy-and-filter-docker-resources-non-filtered</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.parent.basedir}/target</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<filtering>false</filtering>
									<includes>
										<include>**/*.jar</include>
										<include>**/*.so</include>
										<include>**/*.gz</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-license-for-containers-and-ITs</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.basedir}/src/main/docker/license</outputDirectory>
							<overwrite>false</overwrite>
							<resources>
								<resource>
									<directory>${project.parent.basedir}/license</directory>
									<filtering>false</filtering>
									<includes>
										<include>*.lic</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<configuration>
					<keepRunning>false</keepRunning>
					<skip>false</skip>
					<showLogs>true</showLogs>
					<logAll>true</logAll>
					<verbose>true</verbose>
					<skipSave>${docker-maven-plugin.skip.save}</skipSave>
					<skipBuild>${docker-maven-plugin.build.save}</skipBuild>
					<autoCreateCustomNetworks>true</autoCreateCustomNetworks>
					<images>
						<image>
							<alias>aps-current-project</alias>
							<name>aps-sdk/alfresco-process-services:development</name>
							<build>
								<buildOptions>
									<platforms>linux/amd64, linux/arm64</platforms>
								</buildOptions>
								<contextDir>${project.parent.basedir}/target</contextDir>
								<dockerFile>${docker.compose.dockerfile.activiti.app}</dockerFile>
								<tags>
									<tag>latest</tag>
									<tag>${modified.version}</tag>
								</tags>
							</build>
							<run>
								<env>
									<CATALINA_OPTS>${catalina.opts.debug}</CATALINA_OPTS>
								</env>
								<network>
									<name>aps-network</name>
									<alias>aps-current-project</alias>
								</network>
								<ports>
									<port>${docker.tomcat.port.external}:${docker.tomcat.port.internal}</port>
									<port>${aps.debug.port}:${aps.debug.port}</port>
								</ports>
								<wait>
									<http>
										<url>http://${docker.host.address}:${docker.tomcat.port.external}/activiti-app</url>
									</http>
									<time>${docker.activiti.time.test}</time>
									<exec>
										<postStart></postStart>
									</exec>
								</wait>
								<volumes>
									<bind>aps-contentstore-volume:/act_data</bind>
								</volumes>
								<dependsOn>
									<container>postgre</container>
									<container>elasticsearch</container>
								</dependsOn>
							</run>
						</image>
						<image>
							<alias>postgre</alias>
							<name>${docker.aps.database.image}</name>
							<run>
								<network>
									<name>aps-network</name>
									<alias>postgre</alias>
								</network>
								<env>
									<POSTGRES_DB>${docker.aps.database.server.db.name}</POSTGRES_DB>
									<POSTGRES_USER>${docker.aps.database.username}</POSTGRES_USER>
									<POSTGRES_PASSWORD>${docker.aps.database.password}</POSTGRES_PASSWORD>
								</env>
								<ports>
									<port>${docker.aps.database.port.internal}:${docker.aps.database.port.external}</port>
								</ports>
								<wait>
									<log>database system is ready to accept connections</log>
									<time>20000</time>
								</wait>
								<volumes>
									<bind>aps-db-volume:/var/lib/postgresql/data</bind>
								</volumes>
							</run>
						</image>
						<image>
							<alias>elasticsearch</alias>
							<name>elasticsearch:${elasticsearch.version}</name>
							<run>
								<network>
									<name>aps-network</name>
									<alias>elasticsearch</alias>
								</network>
								<env>
									<discovery.type>${docker.aps.es.discovery.type}</discovery.type>
									<ES_JAVA_OPTS>${docker.aps.es.memory.settings}</ES_JAVA_OPTS>
								</env>
								<ports>
									<port>${docker.es.service.port.internal}:${docker.es.service.port.external}</port>
									<port>${docker.es.discovery.port.internal}:${docker.es.discovery.port.external}</port>
								</ports>
								<wait>
									<http>
										<url>http://localhost:${docker.es.service.port.external}/_cat/health</url>
										<status>200</status>
										<method>GET</method>
									</http>
									<time>120000</time>
								</wait>
								<volumes>
									<bind>aps-es-volume:/usr/share/elasticsearch/data</bind>
								</volumes>
							</run>
						</image>
					</images>
					<volumes>
						<volume>
							<name>aps-db-volume</name>
							<driver>local</driver>
						</volume>
						<volume>
							<name>aps-contentstore-volume</name>
							<driver>local</driver>
						</volume>
						<volume>
							<name>aps-es-volume</name>
							<driver>local</driver>
						</volume>
					</volumes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>purge-volumes</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>remove-volumes</id>
								<phase>clean</phase>
								<goals>
									<goal>volume-remove</goal>
								</goals>
								<configuration>
									<volumes>
										<volume>
											<name>aps-db-volume</name>
										</volume>
										<volume>
											<name>aps-es-volume</name>
										</volume>
										<volume>
											<name>aps-contentstore-volume</name>
										</volume>
									</volumes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>arm64</id>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<arch>aarch64</arch>
				</os>
			</activation>
			<properties>
				<docker-maven-plugin.skip.save>true</docker-maven-plugin.skip.save>
				<docker-maven-plugin.build.save>true</docker-maven-plugin.build.save>
				<docker.compose.dockerfile.activiti.app>Dockerfile-${aps.version}-arm64</docker.compose.dockerfile.activiti.app>
				<docker.compose.dockerfile.activiti.admin>Dockerfile-admin-${aps.version}-arm64</docker.compose.dockerfile.activiti.admin>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>build-activiti-app-arm64</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>docker</executable>
									<workingDirectory>${project.parent.basedir}/target</workingDirectory>
									<arguments>
										<argument>buildx</argument>
										<argument>build</argument>
										<argument>--file=${docker.compose.dockerfile.activiti.app}</argument>
										<argument>--platform=linux/arm64</argument>
										<argument>-taps-sdk/alfresco-process-services:development</argument>
										<argument>-tlatest</argument>
										<argument>.</argument>
										<argument>-o</argument>
										<argument>type=docker</argument>
									</arguments>
									<environmentVariables>
										<LANG>en_US</LANG>
									</environmentVariables>
								</configuration>
							</execution>
							<execution>
								<id>build-activiti-admin-arm64</id>
								<phase>${build-activiti-admin-arm64.phase}</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>docker</executable>
									<workingDirectory>${project.parent.basedir}/target/admin</workingDirectory>
									<arguments>
										<argument>buildx</argument>
										<argument>build</argument>
										<argument>--file=${docker.compose.dockerfile.activiti.admin}</argument>
										<argument>--platform=linux/arm64</argument>
										<argument>-taps-sdk/alfresco-process-services-admin:development</argument>
										<argument>-tlatest</argument>
										<argument>.</argument>
										<argument>-o</argument>
										<argument>type=docker</argument>
									</arguments>
									<environmentVariables>
										<LANG>en_US</LANG>
									</environmentVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>activiti-admin</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<configuration>
							<keepRunning>false</keepRunning>
							<skip>false</skip>
							<showLogs>true</showLogs>
							<logAll>true</logAll>
							<verbose>true</verbose>
							<skipSave>${docker-maven-plugin.skip.save}</skipSave>
							<skipBuild>${docker-maven-plugin.build.save}</skipBuild>
							<autoCreateCustomNetworks>true</autoCreateCustomNetworks>
							<images>
								<image>
									<alias>aps-admin</alias>
									<name>aps-sdk/alfresco-process-services-admin:development</name>
									<build>
										<skip>${skip.admin}</skip>
										<contextDir>${project.parent.basedir}/target/admin</contextDir>
										<dockerFile>${docker.compose.dockerfile.activiti.admin}</dockerFile>
										<tags>
											<tag>latest</tag>
											<tag>${modified.version}</tag>
										</tags>
									</build>
									<run>
										<network>
											<name>aps-network</name>
											<alias>aps-admin</alias>
										</network>
										<ports>
											<port>${docker.aps-admin.tomcat.port.internal}:${docker.aps-admin.tomcat.port.external}</port>
										</ports>
										<wait>
											<http>
												<url>http://${docker.host.address}:8081/activiti-admin</url>
											</http>
											<time>${docker.activiti.time.test}</time>
										</wait>
										<dependsOn>
											<container>aps-current-project</container>
										</dependsOn>
									</run>
								</image>
								<image>
									<alias>aps-current-project</alias>
									<name>aps-sdk/alfresco-process-services:development</name>
									<build>
										<buildOptions>
											<platforms>linux/amd64, linux/arm64</platforms>
										</buildOptions>
										<contextDir>${project.parent.basedir}/target</contextDir>
										<dockerFile>${docker.compose.dockerfile.activiti.app}</dockerFile>
										<tags>
											<tag>latest</tag>
											<tag>${modified.version}</tag>
										</tags>
										<runCmds>
											<runCmd>mkdir -p /act_data </runCmd>
											<runCmd>chown 33007:33007 -R /act_data</runCmd>
										</runCmds>
									</build>

									<run>
										<env>
											<CATALINA_OPTS>${catalina.opts.debug}</CATALINA_OPTS>
										</env>
										<network>
											<name>aps-network</name>
											<alias>aps-current-project</alias>
										</network>
										<ports>
											<port>${docker.tomcat.port.external}:${docker.tomcat.port.internal}</port>
											<port>${aps.debug.port}:${aps.debug.port}</port>
										</ports>
										<wait>
											<http>
												<url>http://${docker.host.address}:${docker.tomcat.port.external}/activiti-app</url>
											</http>
											<time>${docker.activiti.time.test}</time>
										</wait>
										<volumes>
											<bind>aps-contentstore-volume:/act_data</bind>
										</volumes>
										<dependsOn>
											<container>postgre</container>
											<container>elasticsearch</container>
										</dependsOn>
									</run>
								</image>
								<image>
									<alias>postgre</alias>
									<name>${docker.aps.database.image}</name>
									<run>
										<network>
											<name>aps-network</name>
											<alias>postgre</alias>
										</network>
										<env>
											<POSTGRES_DB>${docker.aps.database.server.db.name}</POSTGRES_DB>
											<POSTGRES_USER>${docker.aps.database.username}</POSTGRES_USER>
											<POSTGRES_PASSWORD>${docker.aps.database.password}</POSTGRES_PASSWORD>
										</env>
										<ports>
											<port>${docker.aps.database.port.internal}:${docker.aps.database.port.external}</port>
										</ports>
										<wait>
											<log>database system is ready to accept connections</log>
											<time>20000</time>
										</wait>

										<volumes>
											<bind>aps-db-volume:/var/lib/postgresql/data</bind>
										</volumes>
									</run>
								</image>
								<image>
									<alias>elasticsearch</alias>
									<name>elasticsearch:${elasticsearch.version}</name>
									<run>
										<network>
											<name>aps-network</name>
											<alias>elasticsearch</alias>
										</network>
										<env>
											<discovery.type>${docker.aps.es.discovery.type}</discovery.type>
											<ES_JAVA_OPTS>${docker.aps.es.memory.settings}</ES_JAVA_OPTS>
										</env>
										<ports>
											<port>${docker.es.service.port.internal}:${docker.es.service.port.external}</port>
											<port>${docker.es.discovery.port.internal}:${docker.es.discovery.port.external}</port>
										</ports>
										<wait>
											<http>
												<url>http://localhost:${docker.es.service.port.external}/_cat/health</url>
												<status>200</status>
												<method>GET</method>
											</http>
											<time>120000</time>
										</wait>
										<volumes>
											<bind>aps-es-volume:/usr/share/elasticsearch/data</bind>
										</volumes>
									</run>
								</image>
							</images>
							<volumes>
								<volume>
									<name>aps-db-volume</name>
									<driver>local</driver>
								</volume>
								<volume>
									<name>aps-contentstore-volume</name>
									<driver>local</driver>
								</volume>
								<volume>
									<name>aps-es-volume</name>
									<driver>local</driver>
								</volume>
							</volumes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>skip.admin</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<skip.admin>true</skip.admin>
				<copy-jdbc-driver-for-admin.phase>none</copy-jdbc-driver-for-admin.phase>
				<build-activiti-admin-arm64.phase>none</build-activiti-admin-arm64.phase>
			</properties>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-jar-extensions</id>
								<phase>package</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.alfresco.activiti</groupId>
											<artifactId>aps-extensions-jar</artifactId>
											<version>${project.version}</version>
											<type>jar</type>
											<overWrite>true</overWrite>
											<outputDirectory>${project.parent.basedir}/target/extensions</outputDirectory>
										</artifactItem>
									</artifactItems>
									<overWriteReleases>false</overWriteReleases>
									<overWriteSnapshots>true</overWriteSnapshots>
								</configuration>
							</execution>
							<execution>
								<id>copy-war-extensions</id>
								<phase>package</phase>
								<goals>
									<goal>copy</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.alfresco.activiti</groupId>
											<artifactId>activiti-app-overlay-war</artifactId>
											<version>${project.version}</version>
											<type>war</type>
											<overWrite>true</overWrite>
											<outputDirectory>${project.parent.basedir}/target/extensions</outputDirectory>
											<destFileName>activiti-app.war</destFileName>
										</artifactItem>
									</artifactItems>
									<overWriteReleases>false</overWriteReleases>
									<overWriteSnapshots>true</overWriteSnapshots>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
</project>